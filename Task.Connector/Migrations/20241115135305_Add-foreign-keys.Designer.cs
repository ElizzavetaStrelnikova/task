// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Task.Connector.Contexts;

#nullable disable

namespace Task.Connector.Migrations
{
    [DbContext(typeof(ConnectorDbContext))]
    [Migration("20241115135305_Add-foreign-keys")]
    partial class Addforeignkeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Task.Connector.Models.ItRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorporatePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("corporatePhoneNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ItRole", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("MigrationId");

                    b.ToTable("_MigrationHistory", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.Password", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Passwords", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.RequestRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("RequestRight", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("login");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("firstName");

                    b.Property<bool>("IsLead")
                        .HasColumnType("boolean")
                        .HasColumnName("isLead");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("lastName");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("middleName");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telephoneNumber");

                    b.HasKey("Login");

                    b.ToTable("User", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.UserItrole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleId");

                    b.Property<string>("UserId")
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("userId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserITRole", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.UserRequestRight", b =>
                {
                    b.Property<int>("RightId")
                        .HasColumnType("integer")
                        .HasColumnName("rightId");

                    b.Property<string>("UserId")
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("userId");

                    b.HasKey("RightId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRequestRight", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.Connector.Models.Password", b =>
                {
                    b.HasOne("Task.Connector.Models.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.Connector.Models.UserItrole", b =>
                {
                    b.HasOne("Task.Connector.Models.ItRole", "ItRole")
                        .WithMany("UserItroles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.Connector.Models.User", "User")
                        .WithMany("UserItroles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.Connector.Models.UserRequestRight", b =>
                {
                    b.HasOne("Task.Connector.Models.RequestRight", "RequestRight")
                        .WithMany("UserRequestRights")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.Connector.Models.User", "User")
                        .WithMany("UserRequestRights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestRight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.Connector.Models.ItRole", b =>
                {
                    b.Navigation("UserItroles");
                });

            modelBuilder.Entity("Task.Connector.Models.RequestRight", b =>
                {
                    b.Navigation("UserRequestRights");
                });

            modelBuilder.Entity("Task.Connector.Models.User", b =>
                {
                    b.Navigation("Passwords");

                    b.Navigation("UserItroles");

                    b.Navigation("UserRequestRights");
                });
#pragma warning restore 612, 618
        }
    }
}
